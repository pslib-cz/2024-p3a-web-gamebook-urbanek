// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using stinsily.Server.Data;

#nullable disable

namespace stinsily.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("stinsily.Server.Models.ChoicesConnections", b =>
                {
                    b.Property<int>("ChoicesConnectionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Effect")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FromSceneSceneID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MiniGameID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RequiredItemID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SceneFromID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SceneToID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ToSceneSceneID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChoicesConnectionsID");

                    b.HasIndex("FromSceneSceneID");

                    b.HasIndex("MiniGameID");

                    b.HasIndex("RequiredItemID");

                    b.HasIndex("ToSceneSceneID");

                    b.ToTable("ChoicesConnections", (string)null);

                    b.HasData(
                        new
                        {
                            ChoicesConnectionsID = 1,
                            Effect = "pokracovani v pribehu",
                            MiniGameID = 1,
                            RequiredItemID = 1,
                            SceneFromID = 1,
                            SceneToID = 2,
                            Text = "prechod na 2. scenu"
                        },
                        new
                        {
                            ChoicesConnectionsID = 2,
                            Effect = "podmínený postup",
                            MiniGameID = 1,
                            RequiredItemID = 2,
                            SceneFromID = 2,
                            SceneToID = 3,
                            Text = "Postup do další místnosti (potřebujete světelný meč)"
                        });
                });

            modelBuilder.Entity("stinsily.Server.Models.Items", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ForceModifier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HealthModifier")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ObiWanRelationshipModifier")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemID");

                    b.ToTable("Items", (string)null);

                    b.HasData(
                        new
                        {
                            ItemID = 1,
                            Description = "nic",
                            ForceModifier = 0,
                            HealthModifier = 0,
                            Name = "nic",
                            ObiWanRelationshipModifier = 0
                        },
                        new
                        {
                            ItemID = 2,
                            Description = "mec",
                            ForceModifier = 10,
                            HealthModifier = 0,
                            Name = "Svetelny mec",
                            ObiWanRelationshipModifier = 0
                        });
                });

            modelBuilder.Entity("stinsily.Server.Models.MiniGames", b =>
                {
                    b.Property<int>("MiniGameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MiniGameID");

                    b.ToTable("MiniGames", (string)null);

                    b.HasData(
                        new
                        {
                            MiniGameID = 1,
                            Description = "nic"
                        },
                        new
                        {
                            MiniGameID = 2,
                            Description = "mini hra 1"
                        });
                });

            modelBuilder.Entity("stinsily.Server.Models.Players", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentSceneID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Force")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObiWanRelationship")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerID");

                    b.HasIndex("CurrentSceneID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("stinsily.Server.Models.Scenes", b =>
                {
                    b.Property<int>("SceneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConnectionID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SceneID");

                    b.ToTable("Scenes", (string)null);

                    b.HasData(
                        new
                        {
                            SceneID = 1,
                            ConnectionID = 1,
                            Description = "trenink",
                            ImageURL = "",
                            Title = "Scena1"
                        },
                        new
                        {
                            SceneID = 2,
                            ConnectionID = 2,
                            Description = "rozhodnuti pristupu",
                            ImageURL = "",
                            Title = "Scena2"
                        },
                        new
                        {
                            SceneID = 3,
                            ConnectionID = 3,
                            Description = "podmineny postup",
                            ImageURL = "",
                            Title = "Scena3"
                        });
                });

            modelBuilder.Entity("stinsily.Server.Models.Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("stinsily.Server.Models.ChoicesConnections", b =>
                {
                    b.HasOne("stinsily.Server.Models.Scenes", "FromScene")
                        .WithMany()
                        .HasForeignKey("FromSceneSceneID");

                    b.HasOne("stinsily.Server.Models.MiniGames", "MiniGame")
                        .WithMany()
                        .HasForeignKey("MiniGameID");

                    b.HasOne("stinsily.Server.Models.Items", "RequiredItem")
                        .WithMany()
                        .HasForeignKey("RequiredItemID");

                    b.HasOne("stinsily.Server.Models.Scenes", "ToScene")
                        .WithMany()
                        .HasForeignKey("ToSceneSceneID");

                    b.Navigation("FromScene");

                    b.Navigation("MiniGame");

                    b.Navigation("RequiredItem");

                    b.Navigation("ToScene");
                });

            modelBuilder.Entity("stinsily.Server.Models.Players", b =>
                {
                    b.HasOne("stinsily.Server.Models.Scenes", "CurrentScene")
                        .WithMany()
                        .HasForeignKey("CurrentSceneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stinsily.Server.Models.Users", "User")
                        .WithOne("Player")
                        .HasForeignKey("stinsily.Server.Models.Players", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentScene");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stinsily.Server.Models.Users", b =>
                {
                    b.Navigation("Player");
                });
#pragma warning restore 612, 618
        }
    }
}
